/* Alane, Ted, Anna, Colleen
 * 2013-02-27
 * Code for Performance Test 2
 */

// tasks
#define WAITS_FOR_START 0
#define DRIVES_UP_STAIRS 1
#define PAUSES_MOTION 2
#define TURNS_RIGHT 3
#define DRIVES_FORWARD 4
#define TURNS_LEFT 5
#define DRIVES_BACKWARD 6
#define DRIVES_FORWARD_2 7

// ports
#define PORT_CDS_START 2
#define PORT_MOTOR_LEFT 2
#define PORT_MOTOR_RIGHT 0

// motor speeds
#define FULL_POWER 100
#define ZERO_POWER 0

// time constants
#define TIME_WAITING_FOR_START 20.0

int main ()
{
    // sequences
    int performance_test_1[] = { WAITS_FOR_START, DRIVES_FORWARD, PAUSES_MOTION, TURNS_LEFT, PAUSES_MOTION, DRIVES_UP_STAIRS, PAUSES_MOTION, TURNS_RIGHT, DRIVES_FORWARD };
    int performance_test_2[] = { WAITS_FOR_START, DRIVES_FORWARD, PAUSES_MOTION, TURNS_LEFT, PAUSES_MOTION, DRIVES_FORWARD, 
          DRIVES_FORWARD, PAUSES_MOTION, DRIVES_BACKWARD, PAUSES_MOTION, TURNS_RIGHT, PAUSES_MOTION, DRIVES_FORWARD_2, PAUSES_MOTION, TURNS_RIGHT, DRIVES_FORWARD };
    
    // run
    run(performance_test_2);
}

void run(int sequence[])
{
    int index = 0;
    while (index < _array_size(sequence))
      {
        int current_task = sequence[index];
        switch (current_task)
          {
            case WAITS_FOR_START:
              {
                wait_for_start(PORT_CDS_START);
                printf("Has triggered start\n");
            }
            break;
            
            case DRIVES_UP_STAIRS:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, FULL_POWER, FULL_POWER, 3.0);
                printf("Has driven up stairs\n");
            }
            break;
            
            case PAUSES_MOTION:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, ZERO_POWER, ZERO_POWER, 1.0);
                printf("Has paused motion\n");
            }
            break;
            
            case TURNS_RIGHT:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, FULL_POWER, -FULL_POWER, 0.8);
                printf("Has turned right\n");
            }
            break;
            
            case DRIVES_FORWARD:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, FULL_POWER, FULL_POWER, 0.6);
                printf("Has driven forward.\n");
            }
            break;
            
            case TURNS_LEFT:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, -FULL_POWER, FULL_POWER, 0.8);
                printf("Has turned left\n");
            }
            break;
            
            case DRIVES_BACKWARD:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, -FULL_POWER, -FULL_POWER, 0.6);
                printf("Has driven backward");
            }
            break;   
            
            case DRIVES_FORWARD_2:
              {
                drive(PORT_MOTOR_LEFT, PORT_MOTOR_RIGHT, FULL_PO WER, FULL_POWER, 1.1);
                printf("Has driven forward.\n");
            }
            break;
        }
        
        index ++;
    }
}

void wait_for_start(int port_start_cds)
{
    float time_start = seconds();
    
    while ((seconds() - time_start) < TIME_WAITING_FOR_START)
      {
        if (analog(port_start_cds) < 10)
          {
            return;
        }
    }
}

void drive(int port_motor_left, int port_motor_right, int power_motor_left, int power_motor_right, float time_duration)
{
    float time_start = seconds();
    
    while ((seconds() - time_start) < time_duration)
      {
        motor(port_motor_left, -power_motor_left);
        motor(port_motor_right, power_motor_right);
    }
}
